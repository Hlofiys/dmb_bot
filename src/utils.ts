import { ServiceStats, ServiceEvent, MilestoneEvent } from './types';
import { config, TOTAL_SERVICE_DAYS } from './config';
import { holidays, milestones } from './events';

/**
 * Get current date in Minsk timezone
 */
export function getCurrentDate(): Date {
  return new Date();
}

/**
 * Calculate days between two dates
 */
export function daysBetween(date1: Date, date2: Date): number {
  const diffTime = date2.getTime() - date1.getTime();
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
}

/**
 * Check if date is in the past
 */
export function isPast(date: Date): boolean {
  return date.getTime() < getCurrentDate().getTime();
}

/**
 * Get milestone for a specific day number
 */
export function getMilestoneForDay(dayNumber: number): MilestoneEvent | null {
  return milestones.find((m) => m.dayNumber === dayNumber) || null;
}

/**
 * Calculate current service statistics
 */
export function getServiceStats(): ServiceStats {
  const now = getCurrentDate();
  const daysPassed = Math.max(0, daysBetween(config.startDate, now));
  const daysLeft = Math.max(0, daysBetween(now, config.endDate));
  const percentComplete = Math.min(100, (daysPassed / TOTAL_SERVICE_DAYS) * 100);

  // Separate events into past and future
  const allEvents = holidays.map((event) => ({
    ...event,
    isPast: isPast(event.date),
  }));

  const completedEvents = allEvents.filter((e) => e.isPast);
  const upcomingEvents = allEvents
    .filter((e) => !e.isPast)
    .sort((a, b) => a.date.getTime() - b.date.getTime());

  const nextEvent = upcomingEvents.length > 0 ? upcomingEvents[0] : null;

  return {
    daysPassed,
    daysLeft,
    totalDays: TOTAL_SERVICE_DAYS,
    percentComplete,
    upcomingEvents,
    completedEvents,
    nextEvent,
  };
}

/**
 * Generate a progress bar
 */
export function generateProgressBar(percent: number, length: number = 20): string {
  const filled = Math.round((percent / 100) * length);
  const empty = length - filled;
  return '‚ñì'.repeat(filled) + '‚ñë'.repeat(empty);
}

/**
 * Format date in Russian
 */
export function formatDate(date: Date): string {
  const months = [
    '—è–Ω–≤–∞—Ä—è',
    '—Ñ–µ–≤—Ä–∞–ª—è',
    '–º–∞—Ä—Ç–∞',
    '–∞–ø—Ä–µ–ª—è',
    '–º–∞—è',
    '–∏—é–Ω—è',
    '–∏—é–ª—è',
    '–∞–≤–≥—É—Å—Ç–∞',
    '—Å–µ–Ω—Ç—è–±—Ä—è',
    '–æ–∫—Ç—è–±—Ä—è',
    '–Ω–æ—è–±—Ä—è',
    '–¥–µ–∫–∞–±—Ä—è',
  ];

  const day = date.getDate();
  const month = months[date.getMonth()];
  const year = date.getFullYear();

  return `${day} ${month} ${year}`;
}

/**
 * Get a random funny message based on progress
 */
export function getRandomFunnyMessage(percentComplete: number): string {
  if (percentComplete < 10) {
    const messages = [
      'üí™ –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∏! –î–µ—Ä–∂–∏—Å—å, —Å–æ–ª–¥–∞—Ç!',
      'üéñÔ∏è –ü–µ—Ä–≤—ã–µ –¥–Ω–∏ - —Å–∞–º—ã–µ —Å–ª–æ–∂–Ω—ã–µ!',
      'ü™ñ –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! –ú—ã –≤–µ—Ä–∏–º –≤ —Ç–µ–±—è!',
      '‚öîÔ∏è –ù–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ! –í–ø–µ—Ä—ë–¥ –∫ –¥–µ–º–±–µ–ª—é!',
    ];
    return messages[Math.floor(Math.random() * messages.length)];
  } else if (percentComplete < 25) {
    const messages = [
      'üî• –í—Ç—è–≥–∏–≤–∞–µ—à—å—Å—è! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!',
      'üí™ –£–∂–µ –Ω–µ –Ω–æ–≤–∏—á–æ–∫!',
      'üéØ –ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å –ø–æ—á—Ç–∏ –ø–æ–∑–∞–¥–∏!',
      '‚≠ê –ú–æ–ª–æ–¥–µ—Ü! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!',
    ];
    return messages[Math.floor(Math.random() * messages.length)];
  } else if (percentComplete < 50) {
    const messages = [
      'üöÄ –£–∂–µ –±–æ–ª—å—à–µ —á–µ—Ç–≤–µ—Ä—Ç–∏! –õ–µ—Ç–∏—Ç –≤—Ä–µ–º—è!',
      'üéä –°–∫–æ—Ä–æ –ø–æ–ª–æ–≤–∏–Ω–∞! –¢–µ—Ä–ø–µ–Ω–∏–µ!',
      'üí´ –¢—ã —É–∂–µ –ø–æ—á—Ç–∏ –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ!',
      'üåü –û—Ç–ª–∏—á–Ω–æ –∏–¥—ë—à—å! –ü–æ–ª–æ–≤–∏–Ω–∞ –±–ª–∏–∑–∫–æ!',
    ];
    return messages[Math.floor(Math.random() * messages.length)];
  } else if (percentComplete < 75) {
    const messages = [
      'üéâ –ë–û–õ–¨–®–ï –ü–û–õ–û–í–ò–ù–´! –î–∞–ª—å—à–µ –ª–µ–≥—á–µ!',
      'üèÜ –ë–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –ø–æ–∑–∞–¥–∏!',
      'üéä –£–∂–µ –º–æ–∂–Ω–æ –º–µ—á—Ç–∞—Ç—å –æ –¥–µ–º–±–µ–ª–µ!',
      'üíØ –ë–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã - —ç—Ç–æ –ø–æ–±–µ–¥–∞!',
    ];
    return messages[Math.floor(Math.random() * messages.length)];
  } else if (percentComplete < 90) {
    const messages = [
      'üèÅ –§–∏–Ω–∏—à–Ω–∞—è –ø—Ä—è–º–∞—è!',
      'üéÜ –£–∂–µ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –¥–æ–º–∞!',
      'üéâ –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å!',
      'üî• –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—ã–≤–æ–∫! –¢—ã –ø–æ—á—Ç–∏ –¥–æ–º–∞!',
    ];
    return messages[Math.floor(Math.random() * messages.length)];
  } else {
    const messages = [
      'üéä –ü–û–°–õ–ï–î–ù–ò–ï –î–ù–ò! –î–µ—Ä–∂–∏—Å—å!',
      'üèÜ –¢—ã –ø–æ—á—Ç–∏ —Å–≤–æ–±–æ–¥–µ–Ω!',
      'üéâ –î–µ–º–±–µ–ª—å —É–∂–µ —Å—Ç—É—á–∏—Ç—Å—è –≤ –¥–≤–µ—Ä—å!',
      'üí™ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—ã–≤–æ–∫! –ú—ã –∂–¥—ë–º —Ç–µ–±—è!',
    ];
    return messages[Math.floor(Math.random() * messages.length)];
  }
}

/**
 * Format service event for display
 */
export function formatEvent(event: ServiceEvent, showDate: boolean = true): string {
  const daysUntil = daysBetween(getCurrentDate(), event.date);
  let text = `${event.emoji} <b>${event.title}</b>`;

  if (showDate) {
    text += `\n   üìÖ ${formatDate(event.date)}`;
  }

  if (!event.isPast && daysUntil > 0) {
    text += `\n   ‚è≥ –ß–µ—Ä–µ–∑ ${daysUntil} ${getDayWord(daysUntil)}`;
  } else if (event.isPast) {
    text += ' ‚úÖ';
  }

  if (event.description) {
    text += `\n   üí¨ ${event.description}`;
  }

  return text;
}

/**
 * Get correct word form for days in Russian
 */
export function getDayWord(days: number): string {
  const lastDigit = days % 10;
  const lastTwoDigits = days % 100;

  if (lastTwoDigits >= 11 && lastTwoDigits <= 14) {
    return '–¥–Ω–µ–π';
  }

  if (lastDigit === 1) {
    return '–¥–µ–Ω—å';
  }

  if (lastDigit >= 2 && lastDigit <= 4) {
    return '–¥–Ω—è';
  }

  return '–¥–Ω–µ–π';
}
