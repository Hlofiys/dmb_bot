import { ServiceStats, ServiceEvent, MilestoneEvent } from "./types.js";
import { config, TOTAL_SERVICE_DAYS } from "./config.js";
import { holidays, milestones } from "./events.js";

/**
 * Get current date in Minsk timezone
 */
export function getCurrentDate(): Date {
  return new Date();
}

/**
 * Calculate days between two dates
 */
export function daysBetween(date1: Date, date2: Date): number {
  const diffTime = date2.getTime() - date1.getTime();
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
}

/**
 * Check if date is in the past
 */
export function isPast(date: Date): boolean {
  return date.getTime() < getCurrentDate().getTime();
}

/**
 * Get milestone for a specific day number
 */
export function getMilestoneForDay(dayNumber: number): MilestoneEvent | null {
  return milestones.find((m) => m.dayNumber === dayNumber) || null;
}

/**
 * Calculate current service statistics
 */
export function getServiceStats(): ServiceStats {
  const now = getCurrentDate();
  const daysPassed = Math.max(0, daysBetween(config.startDate, now));
  const daysLeft = Math.max(0, daysBetween(now, config.endDate));
  const percentComplete = Math.min(
    100,
    (daysPassed / TOTAL_SERVICE_DAYS) * 100
  );

  // Separate events into past and future
  const allEvents = holidays.map((event) => ({
    ...event,
    isPast: isPast(event.date),
  }));

  const completedEvents = allEvents.filter((e) => e.isPast);
  const upcomingEvents = allEvents
    .filter((e) => !e.isPast)
    .sort((a, b) => a.date.getTime() - b.date.getTime());

  const nextEvent = upcomingEvents.length > 0 ? upcomingEvents[0] : null;

  return {
    daysPassed,
    daysLeft,
    totalDays: TOTAL_SERVICE_DAYS,
    percentComplete,
    upcomingEvents,
    completedEvents,
    nextEvent,
  };
}

/**
 * Generate a progress bar
 */
export function generateProgressBar(
  percent: number,
  length: number = 20
): string {
  const filled = Math.round((percent / 100) * length);
  const empty = length - filled;
  return "‚ñì".repeat(filled) + "‚ñë".repeat(empty);
}

/**
 * Format date in Russian
 */
export function formatDate(date: Date): string {
  const months = [
    "—è–Ω–≤–∞—Ä—è",
    "—Ñ–µ–≤—Ä–∞–ª—è",
    "–º–∞—Ä—Ç–∞",
    "–∞–ø—Ä–µ–ª—è",
    "–º–∞—è",
    "–∏—é–Ω—è",
    "–∏—é–ª—è",
    "–∞–≤–≥—É—Å—Ç–∞",
    "—Å–µ–Ω—Ç—è–±—Ä—è",
    "–æ–∫—Ç—è–±—Ä—è",
    "–Ω–æ—è–±—Ä—è",
    "–¥–µ–∫–∞–±—Ä—è",
  ];

  const day = date.getDate();
  const month = months[date.getMonth()];
  const year = date.getFullYear();

  return `${day} ${month} ${year}`;
}

/**
 * Get a random funny message based on progress
 */
export function getRandomFunnyMessage(
  percentComplete: number,
  isGirlfriend: boolean = false
): string {
  if (percentComplete < 10) {
    const girlfriendMessages = [
      "üí™ –°–ª—É–∂–±–∞ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∞—Å—å! –ü–æ–¥–¥–µ—Ä–∂–∏ –µ–≥–æ!",
      "üéñÔ∏è –ü–µ—Ä–≤—ã–µ –¥–Ω–∏ —Å–∞–º—ã–µ —Å–ª–æ–∂–Ω—ã–µ, –Ω–æ –≤—ã —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å!",
      "ü™ñ –û–Ω –º–æ–ª–æ–¥–µ—Ü! –ù–∞–ø–∏—à–∏ –µ–º—É —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–æ–±—Ä–æ–µ!",
      "‚öîÔ∏è –ù–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ! –í—ã –æ–±–∞ —Å–∏–ª—å–Ω—ã–µ!",
    ];
    const generalMessages = [
      "üí™ –°–ª—É–∂–±–∞ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∞—Å—å! –û–Ω –¥–µ—Ä–∂–∏—Ç—Å—è!",
      "üéñÔ∏è –ü–µ—Ä–≤—ã–µ –¥–Ω–∏ - —Å–∞–º—ã–µ —Å–ª–æ–∂–Ω—ã–µ, –Ω–æ –æ–Ω —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è!",
      "ü™ñ –û–Ω –º–æ–ª–æ–¥–µ—Ü! –í—Å–µ –≤–µ—Ä—è—Ç –≤ –Ω–µ–≥–æ!",
      "‚öîÔ∏è –ù–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ! –û–Ω –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏!",
    ];
    const messages = isGirlfriend ? girlfriendMessages : generalMessages;
    return messages[Math.floor(Math.random() * messages.length)];
  } else if (percentComplete < 25) {
    const girlfriendMessages = [
      "üî• –û–Ω –≤—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è! –¢–≤–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç!",
      "üí™ –û–Ω —É–∂–µ –Ω–µ –Ω–æ–≤–∏—á–æ–∫!",
      "üéØ –ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å –ø–æ—á—Ç–∏ –ø–æ–∑–∞–¥–∏!",
      "‚≠ê –û–Ω –º–æ–ª–æ–¥–µ—Ü! –ü—Ä–æ–¥–æ–ª–∂–∞–π –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å!",
    ];
    const generalMessages = [
      "üî• –û–Ω –≤—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
      "üí™ –û–Ω —É–∂–µ –Ω–µ –Ω–æ–≤–∏—á–æ–∫!",
      "üéØ –ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å –ø–æ—á—Ç–∏ –ø–æ–∑–∞–¥–∏!",
      "‚≠ê –û–Ω –º–æ–ª–æ–¥–µ—Ü! –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
    ];
    const messages = isGirlfriend ? girlfriendMessages : generalMessages;
    return messages[Math.floor(Math.random() * messages.length)];
  } else if (percentComplete < 50) {
    const girlfriendMessages = [
      "üöÄ –£–∂–µ –±–æ–ª—å—à–µ —á–µ—Ç–≤–µ—Ä—Ç–∏! –°–∫–æ—Ä–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç–µ—Å—å!",
      "üéä –°–∫–æ—Ä–æ –ø–æ–ª–æ–≤–∏–Ω–∞! –í—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å!",
      "üí´ –û–Ω —É–∂–µ –ø–æ—á—Ç–∏ –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø—É—Ç–∏!",
      "üåü –û—Ç–ª–∏—á–Ω–æ! –ü–æ–ª–æ–≤–∏–Ω–∞ –≤—Å—ë –±–ª–∏–∂–µ!",
    ];
    const generalMessages = [
      "üöÄ –£–∂–µ –±–æ–ª—å—à–µ —á–µ—Ç–≤–µ—Ä—Ç–∏! –õ–µ—Ç–∏—Ç –≤—Ä–µ–º—è!",
      "üéä –°–∫–æ—Ä–æ –ø–æ–ª–æ–≤–∏–Ω–∞! –¢–µ—Ä–ø–µ–Ω–∏–µ!",
      "üí´ –û–Ω —É–∂–µ –ø–æ—á—Ç–∏ –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ!",
      "üåü –û—Ç–ª–∏—á–Ω–æ –∏–¥—ë—Ç! –ü–æ–ª–æ–≤–∏–Ω–∞ –±–ª–∏–∑–∫–æ!",
    ];
    const messages = isGirlfriend ? girlfriendMessages : generalMessages;
    return messages[Math.floor(Math.random() * messages.length)];
  } else if (percentComplete < 75) {
    const girlfriendMessages = [
      "üéâ –ë–û–õ–¨–®–ï –ü–û–õ–û–í–ò–ù–´! –í—Å—Ç—Ä–µ—á–∞ –≤—Å—ë –±–ª–∏–∂–µ!",
      "üèÜ –ë–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –ø–æ–∑–∞–¥–∏! –î–µ—Ä–∂–∏—Ç–µ—Å—å!",
      "üéä –£–∂–µ –º–æ–∂–Ω–æ –º–µ—á—Ç–∞—Ç—å –æ –≤—Å—Ç—Ä–µ—á–µ!",
      "üíØ –ë–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã - –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å!",
    ];
    const generalMessages = [
      "üéâ –ë–û–õ–¨–®–ï –ü–û–õ–û–í–ò–ù–´! –î–∞–ª—å—à–µ –ª–µ–≥—á–µ!",
      "üèÜ –ë–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –ø–æ–∑–∞–¥–∏!",
      "üéä –£–∂–µ –º–æ–∂–Ω–æ –º–µ—á—Ç–∞—Ç—å –æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏!",
      "üíØ –ë–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã - —ç—Ç–æ –ø–æ–±–µ–¥–∞!",
    ];
    const messages = isGirlfriend ? girlfriendMessages : generalMessages;
    return messages[Math.floor(Math.random() * messages.length)];
  } else if (percentComplete < 90) {
    const girlfriendMessages = [
      "üèÅ –§–∏–Ω–∏—à–Ω–∞—è –ø—Ä—è–º–∞—è! –°–∫–æ—Ä–æ –æ–±–Ω–∏–º–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞!",
      "üéÜ –£–∂–µ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç–µ—Å—å!",
      "üéâ –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å!",
      "üî• –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—ã–≤–æ–∫! –û–Ω –ø–æ—á—Ç–∏ –¥–æ–º–∞!",
    ];
    const generalMessages = [
      "üèÅ –§–∏–Ω–∏—à–Ω–∞—è –ø—Ä—è–º–∞—è!",
      "üéÜ –£–∂–µ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –æ–Ω –¥–æ–º–∞!",
      "üéâ –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å!",
      "üî• –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—ã–≤–æ–∫! –û–Ω –ø–æ—á—Ç–∏ –¥–æ–º–∞!",
    ];
    const messages = isGirlfriend ? girlfriendMessages : generalMessages;
    return messages[Math.floor(Math.random() * messages.length)];
  } else {
    const girlfriendMessages = [
      "üéä –ü–û–°–õ–ï–î–ù–ò–ï –î–ù–ò! –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ —É–≤–∏–¥–∏—Ç–µ—Å—å!",
      "üèÜ –û–Ω –ø–æ—á—Ç–∏ –¥–æ–º–∞! –ì–æ—Ç–æ–≤—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ!",
      "üéâ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –Ω–∞ –ø–æ—Ä–æ–≥–µ!",
      "üí™ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏! –í—ã —Ç–∞–∫ –¥–æ–ª–≥–æ –∂–¥–∞–ª–∏ —ç—Ç–æ–≥–æ!",
    ];
    const generalMessages = [
      "üéä –ü–û–°–õ–ï–î–ù–ò–ï –î–ù–ò! –û–Ω –¥–µ—Ä–∂–∏—Ç—Å—è!",
      "üèÜ –û–Ω –ø–æ—á—Ç–∏ —Å–≤–æ–±–æ–¥–µ–Ω!",
      "üéâ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ —Å—Ç—É—á–∏—Ç—Å—è –≤ –¥–≤–µ—Ä—å!",
      "üí™ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—ã–≤–æ–∫! –í—Å–µ –µ–≥–æ –∂–¥—É—Ç!",
    ];
    const messages = isGirlfriend ? girlfriendMessages : generalMessages;
    return messages[Math.floor(Math.random() * messages.length)];
  }
}

/**
 * Format service event for display
 */
export function formatEvent(
  event: ServiceEvent,
  showDate: boolean = true
): string {
  const daysUntil = daysBetween(getCurrentDate(), event.date);
  let text = `${event.emoji} <b>${event.title}</b>`;

  if (showDate) {
    text += `\n   üìÖ ${formatDate(event.date)}`;
  }

  if (!event.isPast && daysUntil > 0) {
    text += `\n   ‚è≥ –ß–µ—Ä–µ–∑ ${daysUntil} ${getDayWord(daysUntil)}`;
  } else if (event.isPast) {
    text += " ‚úÖ";
  }

  if (event.description) {
    text += `\n   üí¨ ${event.description}`;
  }

  return text;
}

/**
 * Get correct word form for days in Russian
 */
export function getDayWord(days: number): string {
  const lastDigit = days % 10;
  const lastTwoDigits = days % 100;

  if (lastTwoDigits >= 11 && lastTwoDigits <= 14) {
    return "–¥–Ω–µ–π";
  }

  if (lastDigit === 1) {
    return "–¥–µ–Ω—å";
  }

  if (lastDigit >= 2 && lastDigit <= 4) {
    return "–¥–Ω—è";
  }

  return "–¥–Ω–µ–π";
}
